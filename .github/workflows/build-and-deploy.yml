name: Build, Publish, Bundle, Promote

permissions:
  id-token: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Library SemVer'
        required: true
        default: '0.0.0'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ECU1_BUILD_NAME: 'ecu1-build'
      ECU2_BUILD_NAME: 'ecu2-build'
      ECU1_BUNDLE_NAME: 'ecu1-bundle'
      ECU2_BUNDLE_NAME: 'ecu2-bundle'
      GPG_KEY_NAME: 'tomj-gpg-key'
      ECU1_QA_REPO: 'ecu1-maven-qa-local'
      ECU2_QA_REPO: 'ecu1-maven-qa-local'
    steps:
      # Checkout the repository code
      - name: Checkout specific commit
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.ref }}

      # Set up JDK (Java Development Kit)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      # Initialize the JFrog CLI for various steps in this workflow
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-jfrog-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github
          disable-auto-build-publish: true

      # Cache Maven dependencies for faster builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Configure Maven for ECU1
        shell: bash
        working-directory: app1
        run: |
          jf mvnc \
          --server-id-resolve=setup-jfrog-cli-server \
          --server-id-deploy=setup-jfrog-cli-server \
          --repo-resolve-releases=mavencentral-remote \
          --repo-resolve-snapshots=mavencentral-remote \
          --repo-deploy-releases=ecu1-maven-dev-local \
          --repo-deploy-snapshots=ecu1-maven-dev-local

      - name: Configure Maven for ECU2
        shell: bash
        working-directory: app2
        run: |
          jf mvnc \
          --server-id-resolve=setup-jfrog-cli-server \
          --server-id-deploy=setup-jfrog-cli-server \
          --repo-resolve-releases=mavencentral-remote \
          --repo-resolve-snapshots=mavencentral-remote \
          --repo-deploy-releases=ecu2-maven-dev-local \
          --repo-deploy-snapshots=ecu2-maven-dev-local
     

      # Fetch the abbreviated SHA of the HEAD pointer for passing to other steps
      - name: Get Abbreviated Commit SHA
        id: short_sha
        run: |
          short_sha=$(git rev-parse --short HEAD)
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # I like to set the Maven project Version with a pointer to the git commit SHA that it was built from.
      - name: Set Version
        working-directory: app1
        run: |
          mvn versions:set -DnewVersion=${{ inputs.version }}-${{ steps.short_sha.outputs.short_sha }}

      - name: Set Version
        working-directory: app2
        run: |
          mvn versions:set -DnewVersion=${{ inputs.version }}-${{ steps.short_sha.outputs.short_sha }}

      # Compile the .jar file using the JFrog CLI Maven Wrapper.
      - name: Build ECU1
        working-directory: app1
        run: |
          jf mvn clean install \
          --build-name=${{ env.ECU1_BUILD_NAME }} \
          --build-number ${{ github.run_number }}

      # Decorate the Build Info with some additional metadata about the Build Environment and Git metadata
      - name: Prepare Build Info for ECU1 Build
        working-directory: app1
        run: |
          jf rt bag ${{ env.ECU1_BUILD_NAME }} ${{ github.run_number }}
          jf rt bce ${{ env.ECU1_BUILD_NAME }} ${{ github.run_number }}

      # Publish the Build to Artifactory
      - name: Publish Build Info for ECU1 Build
        working-directory: app1
        run: |
          jf rt bp ${{ env.ECU1_BUILD_NAME }} ${{ github.run_number }}

      # Compile the .jar file using the JFrog CLI Maven Wrapper.
      - name: Build ECU2
        working-directory: app2
        run: |
          jf mvn clean install \
          --build-name=${{ env.ECU2_BUILD_NAME }} \
          --build-number ${{ github.run_number }}

      # Decorate the Build Info with some additional metadata about the Build Environment and Git metadata
      - name: Prepare Build Info for ECU2 Build
        working-directory: app2
        run: |
          jf rt bag ${{ env.ECU2_BUILD_NAME }} ${{ github.run_number }}
          jf rt bce ${{ env.ECU2_BUILD_NAME }} ${{ github.run_number }}

      # Publish the Build to Artifactory
      - name: Publish Build Info for ECU2 Build
        working-directory: app2
        run: |
          jf rt bp ${{ env.ECU2_BUILD_NAME }} ${{ github.run_number }}


      # Create the Release Bundle
#      - name: Create Release Bundle
#        run: |
#          jf release-bundle-create \
#          --spec=.github/workflows/filespecs/release-bundle-spec.json \
#          --spec-vars="BUILD=${{ github.repository }}/${{ github.run_number }}" \
#          --signing-key=tomj-gpg-key \
#          --sync=true \
#          rlm-intro-bundle ${{ github.run_number }}-${{ steps.short_sha.outputs.short_sha }}

       # Named parameters a little messy in a Bash script.  These are the positional parameters the
       # Bash script is expecting in this order:
#      ACCESS_TOKEN=$1
#      SIGNING_KEY_NAME=$2
#      RELEASE_BUNDLE_NAME=$3
#      RELEASE_BUNDLE_VERSION=$4
#      BUILD_NAME=$5
#      BUILD_NUMBER=$6

      - name: Create Release Bundle with REST API for ECU1
        working-directory: .github/workflows
        run: |
          chmod +x create-release-bundle.sh
          ./create-release-bundle.sh \
          ${{ secrets.CURL_BASIC_AUTH }} \
          ${{ env.GPG_KEY_NAME }} \
          ${{ env.ECU1_BUNDLE_NAME }} \
          ${{ github.run_number }} \
          "${{ env.ECU1_BUILD_NAME }}" \
          ${{ github.run_number }}

      - name: Create Release Bundle with REST API for ECU2
        working-directory: .github/workflows
        run: |
          chmod +x create-release-bundle.sh
          ./create-release-bundle.sh \
          ${{ secrets.CURL_BASIC_AUTH }} \
          ${{ env.GPG_KEY_NAME }} \
          ${{ env.ECU2_BUNDLE_NAME }} \
          ${{ github.run_number }} \
          "${{ env.ECU2_BUILD_NAME }}" \
          ${{ github.run_number }}          
          
      # Promote the Release Bundle to STAGE.  Note the --include-repository parameter.  This defines a scope into which
      # the Bundle's contents should be unpacked.  Without this switch, and in the absence of a JFrog Project context
      # the promotion event will unpack the contents Globally into any repo with the "STAGE" tag.
#      - name: Promote Release Bundle to Dev
#        id: promote-release-bundle-to-dev
#        run: |
#          jf release-bundle-promote \
#          --signing-key="tomj-gpg-key" \
#          --include-repos=rlm-introduction-stage-local \
#          rlm-intro-bundle ${{ github.run_number }}-${{ steps.short_sha.outputs.short_sha }} STAGE

       # Parameters and their positions
       # RT_TOKEN=$1
       # SIGNING_KEY_NAME=$2
       # BUNDLE_NAME=$3
       # BUNDLE_VERSION=$4
       # ENVIRONMENT=$5
       # INCLUDED_REPOSITORY_KEYS=$6
       # OVERWRITE_EXISTING_ARTIFACTS=$7
      - name: Promote Release Bundle to Stage with REST API for ECU1
        working-directory: .github/workflows
        run: |
          chmod +x promote-release-bundle.sh
          ./promote-release-bundle.sh \
          ${{ secrets.CURL_BASIC_AUTH }} \
          ${{ env.GPG_KEY_NAME }} \
          ${{ env.ECU1_BUNDLE_NAME }} \
          ${{ github.run_number }} \
          "QA" \
          ${{ env.ECU1_QA_REPO }} \
          false

      # Parameters and their positions
      #      RT_TOKEN=$1
      #      SIGNING_KEY_NAME=$2
      #      BUNDLE_NAME=$3
      #      BUNDLE_VERSION=$4
      #      ENVIRONMENT=$5
      #      INCLUDED_REPOSITORY_KEYS=$6
      #      OVERWRITE_EXISTING_ARTIFACTS=$7
      - name: Promote Release Bundle to Stage with REST API for ECU2
        working-directory: .github/workflows
        run: |
          chmod +x promote-release-bundle.sh
          ./promote-release-bundle.sh \
          ${{ secrets.CURL_BASIC_AUTH }} \
          ${{ env.GPG_KEY_NAME }} \
          ${{ env.ECU2_BUNDLE_NAME }} \
          ${{ github.run_number }} \
          "QA" \
          ${{ env.ECU2_QA_REPO }} \
          false
